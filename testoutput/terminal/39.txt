Boomerang alpha 0.3.1 09/Sep/2006
Machine 8051 detected 
Decode assembly 
loading...
fname= ./typecheckingtestcases/tpn39.txt
 pname = `
creating a new Frontend 
in frontend::load pBF =bff->load
binaryfactory::load
after get instace for, numsections =  0
<---------------RealLoad---------------> 
file image size :4884
ELF
pHeader -> e_ident ELF
pHeader -> e_class 
pHeader -> endianess 
pHeader -> e_version 16777216
pHeader -> phoff 34000000
i34
pHeader -> shoff dc0e0000
iedc
m_pStrings
<--SECTION INFO 0-->
NAME : 
OFFSET : 0
HOSTADDR : 0
NATIVEADDR : 0
SECTIONSIZE : 0
.rel true
jump to branch
align : 0
re set NativeAddr: 8000000
TYPE : 0
READONLY SECTION
<--SECTION INFO 1-->
NAME : .interp
OFFSET : 114
HOSTADDR : 904b114
NATIVEADDR : 10114
SECTIONSIZE : 13
.rel true
TYPE : 1
READONLY SECTION
<--SECTION INFO 2-->
NAME : .note.ABI-tag
OFFSET : 128
HOSTADDR : 904b128
NATIVEADDR : 10128
SECTIONSIZE : 20
.rel true
TYPE : 7
READONLY SECTION
<--SECTION INFO 3-->
NAME : .hash
OFFSET : 148
HOSTADDR : 904b148
NATIVEADDR : 10148
SECTIONSIZE : 24
.rel true
TYPE : 5
READONLY SECTION
<--SECTION INFO 4-->
NAME : .dynsym
OFFSET : 16c
HOSTADDR : 904b16c
NATIVEADDR : 1016c
SECTIONSIZE : 40
.rel true
TYPE : b
READONLY SECTION
<--SECTION INFO 5-->
NAME : .dynstr
OFFSET : 1ac
HOSTADDR : 904b1ac
NATIVEADDR : 101ac
SECTIONSIZE : 45
.rel true
TYPE : 3
READONLY SECTION
<--SECTION INFO 6-->
NAME : .gnu.version
OFFSET : 1f2
HOSTADDR : 904b1f2
NATIVEADDR : 101f2
SECTIONSIZE : 8
.rel true
TYPE : 6fffffff
READONLY SECTION
<--SECTION INFO 7-->
NAME : .gnu.version_r
OFFSET : 1fc
HOSTADDR : 904b1fc
NATIVEADDR : 101fc
SECTIONSIZE : 20
.rel true
TYPE : 6ffffffe
READONLY SECTION
<--SECTION INFO 8-->
NAME : .rela.dyn
OFFSET : 21c
HOSTADDR : 904b21c
NATIVEADDR : 1021c
SECTIONSIZE : c
TYPE : 4
READONLY SECTION
<--SECTION INFO 9-->
NAME : .rela.plt
OFFSET : 228
HOSTADDR : 904b228
NATIVEADDR : 10228
SECTIONSIZE : 18
TYPE : 4
READONLY SECTION
<--SECTION INFO a-->
NAME : .init
OFFSET : 240
HOSTADDR : 904b240
NATIVEADDR : 10240
SECTIONSIZE : 48
.rel true
TYPE : 1
READONLY SECTION
EXECUTE SECTION
<--SECTION INFO b-->
NAME : .text
OFFSET : 2a0
HOSTADDR : 904b2a0
NATIVEADDR : 102a0
SECTIONSIZE : 2b0
.rel true
TYPE : 1
READONLY SECTION
EXECUTE SECTION
<--SECTION INFO c-->
NAME : .fini
OFFSET : 550
HOSTADDR : 904b550
NATIVEADDR : 10550
SECTIONSIZE : 14
.rel true
TYPE : 1
READONLY SECTION
EXECUTE SECTION
<--SECTION INFO d-->
NAME : .rodata
OFFSET : 564
HOSTADDR : 904b564
NATIVEADDR : 10564
SECTIONSIZE : 4
.rel true
TYPE : 1
READONLY SECTION
<--SECTION INFO e-->
NAME : .eh_frame
OFFSET : 568
HOSTADDR : 904b568
NATIVEADDR : 10568
SECTIONSIZE : 4
.rel true
TYPE : 1
READONLY SECTION
<--SECTION INFO f-->
NAME : .ctors
OFFSET : 56c
HOSTADDR : 904b56c
NATIVEADDR : 2056c
SECTIONSIZE : 8
.rel true
TYPE : 1
<--SECTION INFO 10-->
NAME : .dtors
OFFSET : 574
HOSTADDR : 904b574
NATIVEADDR : 20574
SECTIONSIZE : 8
.rel true
TYPE : 1
<--SECTION INFO 11-->
NAME : .jcr
OFFSET : 57c
HOSTADDR : 904b57c
NATIVEADDR : 2057c
SECTIONSIZE : 4
.rel true
TYPE : 1
<--SECTION INFO 12-->
NAME : .dynamic
OFFSET : 580
HOSTADDR : 904b580
NATIVEADDR : 20580
SECTIONSIZE : c8
.rel true
TYPE : 6
<--SECTION INFO 13-->
NAME : .got
OFFSET : 648
HOSTADDR : 904b648
NATIVEADDR : 20648
SECTIONSIZE : 10
.rel true
TYPE : 1
<--SECTION INFO 14-->
NAME : .plt
OFFSET : 658
HOSTADDR : 904b658
NATIVEADDR : 20658
SECTIONSIZE : 4c
.rel true
TYPE : 1
EXECUTE SECTION
<--SECTION INFO 15-->
NAME : .data
OFFSET : 6a4
HOSTADDR : 904b6a4
NATIVEADDR : 206a4
SECTIONSIZE : 8
.rel true
TYPE : 1
<--SECTION INFO 16-->
NAME : .bss
OFFSET : 6ac
HOSTADDR : 904b6ac
NATIVEADDR : 206ac
SECTIONSIZE : c
.rel true
TYPE : 8
BSS SECTION
<--SECTION INFO 17-->
NAME : .comment
OFFSET : 6ac
HOSTADDR : 904b6ac
NATIVEADDR : 0
SECTIONSIZE : 21
.rel true
jump to branch
align : 1
re set NativeAddr: 8000000
TYPE : 1
READONLY SECTION
<--SECTION INFO 18-->
NAME : .shstrtab
OFFSET : 6cd
HOSTADDR : 904b6cd
NATIVEADDR : 0
SECTIONSIZE : d0
.rel true
jump to branch
align : 1
re set NativeAddr: 8000021
TYPE : 3
READONLY SECTION
<--SECTION INFO 19-->
NAME : .symtab
OFFSET : 7a0
HOSTADDR : 904b7a0
NATIVEADDR : 0
SECTIONSIZE : 480
.rel true
jump to branch
align : 4
re set NativeAddr: 80000f4
TYPE : 2
READONLY SECTION
<--SECTION INFO 1a-->
NAME : .strtab
OFFSET : c20
HOSTADDR : 904bc20
NATIVEADDR : 0
SECTIONSIZE : 2ba
.rel true
jump to branch
align : 1
re set NativeAddr: 8000574
TYPE : 3
READONLY SECTION
<---------------Finish RealLoad---------------> 
after realload, numsections =  1b
in binaryfile::gettextlimits, numsections = 1b 
Sect->pSectionName 0 000 
Sect->pSectionName 1 000 .interp
Sect->pSectionName 2 000 .note.ABI-tag
Sect->pSectionName 3 000 .hash
Sect->pSectionName 4 000 .dynsym
Sect->pSectionName 5 000 .dynstr
Sect->pSectionName 6 000 .gnu.version
Sect->pSectionName 7 000 .gnu.version_r
Sect->pSectionName 8 000 .rela.dyn
Sect->pSectionName 9 000 .rela.plt
Sect->pSectionName a 100 .init
Sect->pSectionName b 100 .text
Sect->pSectionName c 100 .fini
Sect->pSectionName d 010 .rodata
Sect->pSectionName e 010 .eh_frame
Sect->pSectionName f 010 .ctors
Sect->pSectionName 10 010 .dtors
Sect->pSectionName 11 010 .jcr
Sect->pSectionName 12 010 .dynamic
Sect->pSectionName 13 010 .got
Sect->pSectionName 14 100 .plt
Sect->pSectionName 15 010 .data
Sect->pSectionName 16 001 .bss
Sect->pSectionName 17 000 .comment
Sect->pSectionName 18 000 .shstrtab
Sect->pSectionName 19 000 .symtab
Sect->pSectionName 1a 000 .strtab
./typecheckingtestcases/tpn39.txt
instantiate 8051
------START PARSING------
./typecheckingtestcases/tpn39.txt
Immediate Value 26
Define variable OPTIONS
BIT
BIT
BIT
BIT
BIT
BIT
BIT
BIT
Immediate Value 29
Define variable OPTIONS2
BIT
BIT
BIT
BIT
BIT
BIT
BIT
BIT
ID DPTR
Immediate Value OPTIONS
Direct Value 3
Operator +
ID A
Indirect value DPTR
BIT
ID DPTR
Immediate Value 26
ID A
Indirect value DPTR
ID CBR
Label AA
Start LabelAA
-----HANDLE BINARY EXPRESSION---
-----HANDLE BIT ---
-----APPENDING JUMP AND BRANCH STATEMENTS---
-----CHECK FOR LOOPS------
***Assembly Name 8051
***Number of labels 1
	 Label name: AA
	 Number of lines: 7
		 Offset 0
		 Opcode MOV
			 Number of Expression: 2
				 Number of Arguments:1
					 DPTR 
				 Number of Arguments:3
					 OPTIONS + 3 
		 Offset 0
		 Opcode MOVX
			 Number of Expression: 2
				 Number of Arguments:1
					 A 
				 Number of Arguments:1
					 DPTR 
		 Offset 0
		 Opcode SETB
			 Number of Expression: 1
				 Number of Arguments:1
					 A 
		 Offset 0
		 Opcode MOV
			 Number of Expression: 2
				 Number of Arguments:1
					 DPTR 
				 Number of Arguments:1
					 26 
		 Offset 0
		 Opcode MOVX
			 Number of Expression: 2
				 Number of Arguments:1
					 A 
				 Number of Arguments:1
					 DPTR 
		 Offset 0
		 Opcode CLR
			 Number of Expression: 1
				 Number of Arguments:1
					 CBR 
		 Offset 0
		 Opcode RET
			 Number of Expression: 0
---ADDRESSING LABEL---
---HANDLE UNION---
AA : 10474
 REGISTER IS BIT PRESENTATOR A
finish createing new frontend
set Frontend for prog variable
set frontend complete
fe->read library catalog
fe-readlibarycatalog finish
entrypoint size 0
decoding entry point...
decode pname==null
start: 10474 gotmain: true
decode main at a!= NOADDRESS
Proc name Before main main
Entering Processing Proc
Name Of Program : 8051
Start at address = 10474
***DECODE LABEL: AA
***AT ADDRESS: 10474
***NUMBER OF INSTRUCTION: 7
Assembly line: 
DPTR10474: MOV_DPTR_ADDR16 r11, r214 + 3
RTL: 
00010474    0 *16* r11 := r214 + 3

Assembly line: 
ABYTE PRESENT: r8
10478: MOVX_A_DPTRA r8, m[ *8**zfill(16,31,r11)]
RTL: 
00010478    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8 := m[ *8**zfill(16,31,r11)]

Assembly line: 
Name: specbits1, 117
1047c: SETB_DIR r117
RTL: 
0001047c    0 *8* r117 := 1

Assembly line: 
DPTRdptr
NUM: 38
10480: MOV_DPTR_ADDR16 r11, 38
RTL: 
00010480    0 *16* r11 := 38

Assembly line: 
ABYTE PRESENT: r8
10484: MOVX_A_DPTRA r8, m[ *8**zfill(16,31,r11)]
RTL: 
00010484    0 *32* tmp1 := zfill(16,31,r11)
            0 *8* r8 := m[ *8**zfill(16,31,r11)]

Assembly line: 
10488: CLR_DIR r208
RTL: 
00010488    0 *8* r208 := 0

Assembly line: 
RTL: 
0001048c    0 RET
              Modifieds: 
              Reaching definitions: 

retAddr = ffffffff rtl = 1048c
finished processing proc main at address 10474
Proc name After decode main main
Proc name main
Sig type:intdecoing entrypoint finish
decoding anything undecoded...
decode child proc
finishing decode...
finishing decode finish
found 1 procs
decompiling...
 considering main
decompil process  
No Decode Childern
find ABI :
child size = 0
 decompiling main
middle decompile  10

remUnusedStmtEtc *forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 2*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

Into constant propagation of procedure
Worklist size: 6
Worklist size: 5
Visit typed exp:  *8**zfill(16,31,r214{0} + 3)
Worklist size: 4
Worklist size: 3
Value: "OPTIONS"
Worklist size: 2
Visit typed exp:  *8**38
Value: "OPTIONS"
Worklist size: 1

remUnusedStmtEtc 2.5*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

4
when will a signature force

remUnusedStmtEtc 3*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 4*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

global type analysis for main

remUnusedStmtEtc *forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 2*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

Into constant propagation of procedure
Worklist size: 4
Visit typed exp:  *8**zfill(16,31,r214{0} + 3)
Worklist size: 3
Worklist size: 2
Visit typed exp:  *8**38
Value: "OPTIONS"
Worklist size: 1

remUnusedStmtEtc 2.5*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

1
when will a signature force

remUnusedStmtEtc 3*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 4*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

===============================
UNION CHECKING AREA 111
Find reg value called, statement:    8 *8* CBR := 0
accAssign:    7 *8* r8 := m[ *8**38]
r8{3}, 1
test
r11{1}, 1
r11{5}, 1
r117{4}, 1
r208{8}, 1
r8{7}, 1
test
STATEMENT:    8 *8* CBR := 0
	   RULE IS FOLLOWED!
===================================
NUM OF UNION FOUND: 2
Byte var: OPTIONS
Bit vars: 
TESTSUPS: 1
TESTSDOWNS: 2
SIMP: 3
CBR: 4
CLAMP: 5
MNK: 6
COMP: 7
MIN: 8
Byte var: OPTIONS2
Bit vars: 
TESTSUPS2: 1
TESTSDOWNS2: 2
SIMP2: 3
CBR2: 4
CLAMP2: 5
MNK2: 6
COMP2: 7
MIN2: 8
===========================
ENTER REPLACE ACC
Find reg value called, statement:    3 *8* a := m[ *8**zfill(16,31,OPTIONS + 3)]
NULL
Find reg value called, statement:    4 *8* specbits1 := 1
accAssign:    3 *8* r8 := m[ *8**zfill(16,31,r214{0} + 3)]
r8{3}, 1
test
STATEMENT:    4 *8* specbits1 := 1
	   RULE IS BROKEN!
Find reg value called, statement:    7 *8* a := m[ *8**38]
accAssign:    3 *8* r8 := m[ *8**zfill(16,31,r214{0} + 3)]
r8{3}, 1
test
Find reg value called, statement:    8 *8* CBR := 0
accAssign:    7 *8* r8 := m[ *8**38]
r8{3}, 1
test
r11{1}, 1
r11{5}, 1
r117{4}, 1
r208{8}, 1
r8{7}, 1
test
Find reg value called, statement:    9 RET *8* a := a
              Modifieds: *8* a,  *16* r11,  *32* specbits1,  *32* CBR
              Reaching definitions: a=a,   r11=38,   r32=argc,   r33=argv,   r34=envp,   specbits1=1,   CBR=0,
                OPTIONS=OPTIONS,   tmp1=38
accAssign:    7 *8* r8 := m[ *8**38]
r8{3}, 1
test
r11{1}, 1
r11{5}, 1
r117{4}, 1
r208{8}, 1
r8{7}, 1
test
statement number: 3, 1
statement number: 4, 0
statement number: 7, 1
statement number: 8, 0
statement number: 9, 0
===========================
THERE ARE SOME PROBLEMS WITH UNION IN YOUR CODE, CANNOT CONTINUE TO DECOMPILE.
completed in 0 secs.

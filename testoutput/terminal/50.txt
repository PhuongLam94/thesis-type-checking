Boomerang alpha 0.3.1 09/Sep/2006
Machine 8051 detected 
Decode assembly 
loading...
fname= ./typecheckingtestcases/tpn50.txt
 pname = `
creating a new Frontend 
in frontend::load pBF =bff->load
binaryfactory::load
after get instace for, numsections =  0
<---------------RealLoad---------------> 
file image size :4884
ELF
pHeader -> e_ident ELF
pHeader -> e_class 
pHeader -> endianess 
pHeader -> e_version 16777216
pHeader -> phoff 34000000
i34
pHeader -> shoff dc0e0000
iedc
m_pStrings
<--SECTION INFO 0-->
NAME : 
OFFSET : 0
HOSTADDR : 0
NATIVEADDR : 0
SECTIONSIZE : 0
.rel true
jump to branch
align : 0
re set NativeAddr: 8000000
TYPE : 0
READONLY SECTION
<--SECTION INFO 1-->
NAME : .interp
OFFSET : 114
HOSTADDR : 9811114
NATIVEADDR : 10114
SECTIONSIZE : 13
.rel true
TYPE : 1
READONLY SECTION
<--SECTION INFO 2-->
NAME : .note.ABI-tag
OFFSET : 128
HOSTADDR : 9811128
NATIVEADDR : 10128
SECTIONSIZE : 20
.rel true
TYPE : 7
READONLY SECTION
<--SECTION INFO 3-->
NAME : .hash
OFFSET : 148
HOSTADDR : 9811148
NATIVEADDR : 10148
SECTIONSIZE : 24
.rel true
TYPE : 5
READONLY SECTION
<--SECTION INFO 4-->
NAME : .dynsym
OFFSET : 16c
HOSTADDR : 981116c
NATIVEADDR : 1016c
SECTIONSIZE : 40
.rel true
TYPE : b
READONLY SECTION
<--SECTION INFO 5-->
NAME : .dynstr
OFFSET : 1ac
HOSTADDR : 98111ac
NATIVEADDR : 101ac
SECTIONSIZE : 45
.rel true
TYPE : 3
READONLY SECTION
<--SECTION INFO 6-->
NAME : .gnu.version
OFFSET : 1f2
HOSTADDR : 98111f2
NATIVEADDR : 101f2
SECTIONSIZE : 8
.rel true
TYPE : 6fffffff
READONLY SECTION
<--SECTION INFO 7-->
NAME : .gnu.version_r
OFFSET : 1fc
HOSTADDR : 98111fc
NATIVEADDR : 101fc
SECTIONSIZE : 20
.rel true
TYPE : 6ffffffe
READONLY SECTION
<--SECTION INFO 8-->
NAME : .rela.dyn
OFFSET : 21c
HOSTADDR : 981121c
NATIVEADDR : 1021c
SECTIONSIZE : c
TYPE : 4
READONLY SECTION
<--SECTION INFO 9-->
NAME : .rela.plt
OFFSET : 228
HOSTADDR : 9811228
NATIVEADDR : 10228
SECTIONSIZE : 18
TYPE : 4
READONLY SECTION
<--SECTION INFO a-->
NAME : .init
OFFSET : 240
HOSTADDR : 9811240
NATIVEADDR : 10240
SECTIONSIZE : 48
.rel true
TYPE : 1
READONLY SECTION
EXECUTE SECTION
<--SECTION INFO b-->
NAME : .text
OFFSET : 2a0
HOSTADDR : 98112a0
NATIVEADDR : 102a0
SECTIONSIZE : 2b0
.rel true
TYPE : 1
READONLY SECTION
EXECUTE SECTION
<--SECTION INFO c-->
NAME : .fini
OFFSET : 550
HOSTADDR : 9811550
NATIVEADDR : 10550
SECTIONSIZE : 14
.rel true
TYPE : 1
READONLY SECTION
EXECUTE SECTION
<--SECTION INFO d-->
NAME : .rodata
OFFSET : 564
HOSTADDR : 9811564
NATIVEADDR : 10564
SECTIONSIZE : 4
.rel true
TYPE : 1
READONLY SECTION
<--SECTION INFO e-->
NAME : .eh_frame
OFFSET : 568
HOSTADDR : 9811568
NATIVEADDR : 10568
SECTIONSIZE : 4
.rel true
TYPE : 1
READONLY SECTION
<--SECTION INFO f-->
NAME : .ctors
OFFSET : 56c
HOSTADDR : 981156c
NATIVEADDR : 2056c
SECTIONSIZE : 8
.rel true
TYPE : 1
<--SECTION INFO 10-->
NAME : .dtors
OFFSET : 574
HOSTADDR : 9811574
NATIVEADDR : 20574
SECTIONSIZE : 8
.rel true
TYPE : 1
<--SECTION INFO 11-->
NAME : .jcr
OFFSET : 57c
HOSTADDR : 981157c
NATIVEADDR : 2057c
SECTIONSIZE : 4
.rel true
TYPE : 1
<--SECTION INFO 12-->
NAME : .dynamic
OFFSET : 580
HOSTADDR : 9811580
NATIVEADDR : 20580
SECTIONSIZE : c8
.rel true
TYPE : 6
<--SECTION INFO 13-->
NAME : .got
OFFSET : 648
HOSTADDR : 9811648
NATIVEADDR : 20648
SECTIONSIZE : 10
.rel true
TYPE : 1
<--SECTION INFO 14-->
NAME : .plt
OFFSET : 658
HOSTADDR : 9811658
NATIVEADDR : 20658
SECTIONSIZE : 4c
.rel true
TYPE : 1
EXECUTE SECTION
<--SECTION INFO 15-->
NAME : .data
OFFSET : 6a4
HOSTADDR : 98116a4
NATIVEADDR : 206a4
SECTIONSIZE : 8
.rel true
TYPE : 1
<--SECTION INFO 16-->
NAME : .bss
OFFSET : 6ac
HOSTADDR : 98116ac
NATIVEADDR : 206ac
SECTIONSIZE : c
.rel true
TYPE : 8
BSS SECTION
<--SECTION INFO 17-->
NAME : .comment
OFFSET : 6ac
HOSTADDR : 98116ac
NATIVEADDR : 0
SECTIONSIZE : 21
.rel true
jump to branch
align : 1
re set NativeAddr: 8000000
TYPE : 1
READONLY SECTION
<--SECTION INFO 18-->
NAME : .shstrtab
OFFSET : 6cd
HOSTADDR : 98116cd
NATIVEADDR : 0
SECTIONSIZE : d0
.rel true
jump to branch
align : 1
re set NativeAddr: 8000021
TYPE : 3
READONLY SECTION
<--SECTION INFO 19-->
NAME : .symtab
OFFSET : 7a0
HOSTADDR : 98117a0
NATIVEADDR : 0
SECTIONSIZE : 480
.rel true
jump to branch
align : 4
re set NativeAddr: 80000f4
TYPE : 2
READONLY SECTION
<--SECTION INFO 1a-->
NAME : .strtab
OFFSET : c20
HOSTADDR : 9811c20
NATIVEADDR : 0
SECTIONSIZE : 2ba
.rel true
jump to branch
align : 1
re set NativeAddr: 8000574
TYPE : 3
READONLY SECTION
<---------------Finish RealLoad---------------> 
after realload, numsections =  1b
in binaryfile::gettextlimits, numsections = 1b 
Sect->pSectionName 0 000 
Sect->pSectionName 1 000 .interp
Sect->pSectionName 2 000 .note.ABI-tag
Sect->pSectionName 3 000 .hash
Sect->pSectionName 4 000 .dynsym
Sect->pSectionName 5 000 .dynstr
Sect->pSectionName 6 000 .gnu.version
Sect->pSectionName 7 000 .gnu.version_r
Sect->pSectionName 8 000 .rela.dyn
Sect->pSectionName 9 000 .rela.plt
Sect->pSectionName a 100 .init
Sect->pSectionName b 100 .text
Sect->pSectionName c 100 .fini
Sect->pSectionName d 010 .rodata
Sect->pSectionName e 010 .eh_frame
Sect->pSectionName f 010 .ctors
Sect->pSectionName 10 010 .dtors
Sect->pSectionName 11 010 .jcr
Sect->pSectionName 12 010 .dynamic
Sect->pSectionName 13 010 .got
Sect->pSectionName 14 100 .plt
Sect->pSectionName 15 010 .data
Sect->pSectionName 16 001 .bss
Sect->pSectionName 17 000 .comment
Sect->pSectionName 18 000 .shstrtab
Sect->pSectionName 19 000 .symtab
Sect->pSectionName 1a 000 .strtab
./typecheckingtestcases/tpn50.txt
instantiate 8051
------START PARSING------
./typecheckingtestcases/tpn50.txt
Immediate Value 26
Define variable OPTIONS
BIT
BIT
BIT
BIT
BIT
BIT
BIT
BIT
Immediate Value 27
Define variable OPTIONS2
BIT
BIT
BIT
BIT
BIT
BIT
BIT
BIT
ID A
ID OPTIONS2
Direct Value 1
Operator -
ID TESTSUPS
ID A
ID OPTIONS
ID TESTSUPS2
Label AA
Start LabelAA
-----HANDLE BINARY EXPRESSION---
-----HANDLE BIT ---
-----APPENDING JUMP AND BRANCH STATEMENTS---
-----CHECK FOR LOOPS------
***Assembly Name 8051
***Number of labels 1
	 Label name: AA
	 Number of lines: 5
		 Offset 0
		 Opcode MOV
			 Number of Expression: 2
				 Number of Arguments:1
					 A 
				 Number of Arguments:3
					 OPTIONS2 - 1 
		 Offset 0
		 Opcode SETB
			 Number of Expression: 1
				 Number of Arguments:1
					 TESTSUPS 
		 Offset 0
		 Opcode MOV
			 Number of Expression: 2
				 Number of Arguments:1
					 A 
				 Number of Arguments:1
					 OPTIONS 
		 Offset 0
		 Opcode CLR
			 Number of Expression: 1
				 Number of Arguments:1
					 TESTSUPS2 
		 Offset 0
		 Opcode RET
			 Number of Expression: 0
---ADDRESSING LABEL---
---HANDLE UNION---
AA : 10474
finish createing new frontend
set Frontend for prog variable
set frontend complete
fe->read library catalog
fe-readlibarycatalog finish
entrypoint size 0
decoding entry point...
decode pname==null
start: 10474 gotmain: true
decode main at a!= NOADDRESS
Proc name Before main main
Entering Processing Proc
Name Of Program : 8051
Start at address = 10474
***DECODE LABEL: AA
***AT ADDRESS: 10474
***NUMBER OF INSTRUCTION: 5
Assembly line: 
A10474: MOV_EXP r8, m[ *8**r214 - 1]
RTL: 
00010474    0 *8* r8 := m[ *8**r214 - 1]

Assembly line: 
10478: SETB_DIR r117
RTL: 
00010478    0 *8* r117 := 1

Assembly line: 
AOPTIONS1047c: MOV_EXP r8, m[r108]
RTL: 
0001047c    0 *8* r8 := m[r108]

Assembly line: 
10480: CLR_DIR r146
RTL: 
00010480    0 *8* r146 := 0

Assembly line: 
RTL: 
00010484    0 RET
              Modifieds: 
              Reaching definitions: 

retAddr = ffffffff rtl = 10484
finished processing proc main at address 10474
Proc name After decode main main
Proc name main
Sig type:intdecoing entrypoint finish
decoding anything undecoded...
decode child proc
finishing decode...
finishing decode finish
found 1 procs
decompiling...
 considering main
decompil process  
No Decode Childern
find ABI :
child size = 0
 decompiling main
middle decompile  10

remUnusedStmtEtc *forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 2*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

Into constant propagation of procedure
Worklist size: 4
Visit typed exp:  *8**r214{0} - 1
Worklist size: 3
Worklist size: 2
Value: "OPTIONS"
Worklist size: 1

remUnusedStmtEtc 2.5*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

3
when will a signature force

remUnusedStmtEtc 3*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 4*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

global type analysis for main

remUnusedStmtEtc *forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 2*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

Into constant propagation of procedure
Worklist size: 4
Visit typed exp:  *8**r214{0} - 1
Worklist size: 3
Worklist size: 2
Value: "OPTIONS"
Worklist size: 1

remUnusedStmtEtc 2.5*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

1
when will a signature force

remUnusedStmtEtc 3*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)


remUnusedStmtEtc 4*forced* { int r8 } main(int argc r32, char *[] * argv r33, char *[] * envp r34)

===============================
UNION CHECKING AREA 111
Find reg value called, statement:    2 *8* TESTSUPS := 1
accAssign:    1 *8* r8 := m[ *8**r214{0} - 1]
r117{2}, 1
r8{1}, 1
test
STATEMENT:    2 *8* TESTSUPS := 1
	   RULE IS BROKEN!
Find reg value called, statement:    4 *8* TESTSUPS2 := 0
accAssign:    3 *8* r8 := m[r108{0}]
r117{2}, 1
r8{1}, 1
test
r146{4}, 1
r8{3}, 1
test
STATEMENT:    4 *8* TESTSUPS2 := 0
	   RULE IS BROKEN!
===================================
THERE ARE SOME PROBLEMS WITH UNION IN YOUR CODE, CANNOT CONTINUE TO DECOMPILE.
completed in 0 secs.
